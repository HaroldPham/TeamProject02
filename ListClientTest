/*CS211 SPRING 2020, Created: 5/20/20, Lee Janzen, Harold Pham, Andy Zhong
This is the Test client for our AbstractList class.
Created for ch16, programming project 3.*/

public class ListClientTest {
	public static void main(String[] args) 
	{
	      // declares our integer lists
	      AbstractList<Integer> list1 = new ArrayList<Integer>();
	      AbstractList<Integer> list2 = new LinkedList<Integer>();

	      // declares our string lists
	      AbstractList<String> list3 = new ArrayList<String>();
	      AbstractList<String> list4 = new LinkedList<String>();

	      // tests our AbstractList methods in ArrayList
	      System.out.println("Testing for ArrayList:\n"); 
	      
	      System.out.println("Before Additions: ");
	      System.out.println("The ArrayList is empty: " + list1.isEmpty()); //test: true
	      System.out.println("The ArrayList size is: " + list1.size()); //test: null

	      System.out.println("\nThe String ArrayList is empty: " + list3.isEmpty()); //test: true
	      System.out.println("The String ArrayList size is: " + list3.size()); //test: null
              
	    
	      System.out.println("\nProcessing Lists...");
	      
	      //Add values to our integer ArrayList list.
	      processIntList(list1);
	      System.out.println("Int List: "+list1);
	      
	      //Add values to our String ArrayList list.
	      processStringList(list3);
	      System.out.println("String List: "+list3);

	      System.out.println("\nLists optimized...");
	      
	      //Test the integer ArrayList
	      System.out.println("\nInt based testing for ArrayList below:\n"); 
	      testIntList(list1);
	      System.out.println("\nInt List testing complete.");

	      //Test the String ArrayList
	      System.out.println("\nString based testing for ArrayList below:\n"); 
	      testStringList(list3);
	      System.out.println("\nString ArrayList testing complete."); 


	      System.out.println("\n"); 

              //Testing for LinkedList has started
	      System.out.println("Testing for LinkedList:\n"); 
	      System.out.println("Before Additions: ");
	      System.out.println("The Int LinkedList is empty: " + list2.isEmpty()); //test: true
	      System.out.println("The Int LinkedList size is: " + list2.size()); //test: null

	      System.out.println("\nThe String LinkedList is empty: " + list4.isEmpty()); //test: true
	      System.out.println("The String LinkedList size is: " + list4.size()); //test: null

	      
	      System.out.println("\nProcessing Lists...");
	      
	      //Add values to integer LinkedList
	      processIntList(list2);
	      System.out.println("Int List: "+list2);

	      //Add values to String LinkedList
	      processStringList(list4);
	      System.out.println("String List: "+list4);

	      System.out.println("\nLists optimized...");
	      
	      //Test integer LinkedList
	      System.out.println("\nInt based testing for LinkedList below:\n"); 
	      testIntList(list2);
	      System.out.println("\nInt LinkedList testing complete.");

 	      //Test string LinkedList
	      System.out.println("\nString based testing for LinkedList below:\n"); 
	      testStringList(list4);
	      System.out.println("\nString LinkedList testing complete."); 
	}

	public static void processIntList(List<Integer> list) 
	{
		list.add(42);
		list.add(18);
		list.add(27);
		list.add(93);

	}
   
       //Add Values into the String List
       public static void processStringList(List<String> list) 
       {
		list.add("apple");
		list.add("pear");
		list.add("cherry");
		list.add("orange");
       }
   
   //Test any list for methods within the AbstractList
   public static <E> void testIntList(AbstractList<Integer> list) 
   {
	   
	  System.out.println("\tTest 1: The printed List (42,18,27,93): " + list.toString());
     
          System.out.println("\n\tTest 2: The List is empty: " + list.isEmpty()); //test: false
      
	  System.out.println("\n\tTest 3: The List contains 93 at index: " + list.indexOf(93)); //test: 3
	  
  	  System.out.println("\n\tTest 4: The List size is: " + list.size()); //test: 4
  	  
	  System.out.println("\n\tTest 5: List contains 42: " + list.contains(42)); //test: true
		
          System.out.println("\n\tTest 6: List contains 2: " + list.contains(2)); //test: false

          list.remove(2); System.out.print("\n\tTest 7: List after removing number at index 2: " + list.toString()); //test:[42, 18, 93]
     
          try 
          {
            list.clear();  
          }
           catch(IllegalStateException e)
          {
            System.out.println("\n\n\tTest 8: The List is empty(clear method). " + e); //test: true
          }	
    }
   
   
   //Test any String list for multiple methods within AbstractList.
   public static <E> void testStringList(AbstractList<String> list) 
   {
	   System.out.println("\tTest 1: The printed List (apple, pear, cherry, orange): " + list.toString());
	     
	   System.out.println("\n\tTest 2: The List is empty: " + list.isEmpty()); //test: false
	      
	   System.out.println("\n\tTest 3: The List contains cherry at index: " + list.indexOf("cherry")); //test: 2
		  
	   System.out.println("\n\tTest 4: The List size is: " + list.size()); //test: 4
	  	  
	    System.out.println("\n\tTest 5: List contains pear: " + list.contains("pear")); //test: true
			
	    System.out.println("\n\tTest 6: List contains grape: " + list.contains("grape")); //test: false
	      
	    list.remove(2); System.out.print("\n\tTest 7: List after removing number at index 2: " + list.toString()); //test:[apple, pear, orange]
	    
	    try 
	    {
	      list.clear();  
	    }
	    catch(IllegalStateException e)
	    {
	      System.out.println("\n\n\tTest 8: The List is empty(clear method). " + e); //test: true
	    }
    }
    
}
